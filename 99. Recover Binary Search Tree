/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

 // We will use inorderTraverse for this because inorderTraverse a BST will give you sorted list.
class Solution {
public:
        TreeNode* prev = new TreeNode(INT_MIN, nullptr, nullptr);
        TreeNode* first = nullptr;
        TreeNode* second = nullptr;

    void recoverTree(TreeNode* root) {

        
        inOrderTraverse(root);

        if (first!= nullptr && second != nullptr){
            int val = first->val;
            first->val = second->val;
            second->val = val;
        }

    }


    void inOrderTraverse(TreeNode* node){
        if (node == nullptr) {return;}

        inOrderTraverse(node->left);

        if (first == nullptr && prev->val >= node->val) {
            first = prev;
        }
        if (first != nullptr && prev->val >= node->val){
            second = node;
        }

        prev = node;

        inOrderTraverse(node->right);


    }
};
