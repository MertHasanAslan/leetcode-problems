class Solution {
public:
    // if it is bipartite, adjacent nodes can not be same color!
    // 0 = uncolored, 1 = color of set A, -1 = color of set B
    bool isBipartite(vector<vector<int>>& graph) {
        vector<int> colors(graph.size());
        queue<int> q;


        for (int i = 0; i < graph.size(); i++){
            if (colors[i] != 0) { continue; } // if already colored, continue

            colors[i] = 1; // start painting first node.
            for (q.push(i); q.empty() != true; q.pop()){ 
                int curr_node = q.front();

                for (auto& node : graph[curr_node]){ // visit neighbors
                    if (colors[node] == 0){ // if adjacent node is uncolored, make opposite color
                        colors[node] = -colors[curr_node];
                        q.push(node); // add new node to queue;
                    }
                    else if(colors[node] == colors[curr_node]) { return false; } // if adjacent nodes color is same, it is not bipartite!
                }

            }
        }

        return true;
    }
};





Note: each vertex in Graph has features:

name // name of vertex

population // population of vertex

Require a Graph G:
    
initialize visited //visited vertexes

initialize roles //roles of vertexes

hosting //this will be consist of vertexess that have a role of hosting

security //this will be consist of vertexes that have a role of security

for each v in G.V // for each vertex in Graph
    if visited[v] == false:
        initialize q // this is a queue
        q.enqueue(v) // add to queue current vertex
        roles[v] = 1 //mark is as 1
            group1 = empty list  // role 1
            group2 = empty list  // role -1
            pop1 = 0 //population of group 1
            pop2 = 0 //population of group 2
        

        while q is not empty: 
            curr_vertex = q.dequeue()
            visited[curr_vertex] = true

            // add name and pop group 1 if its role equal to 1
            if roles[curr_vertex] equal 1:
                group1.append(curr_vertex.name)
                pop = pop + curr_vertex.population

            // add name and pop group 2 if its role equal to -1
            else if roles[curr_vertex] equal to -1:
                group2.append(curr_vertex.name)
                pop = pop + curr_vertex.population

            // visit neighbor vertexes
            for each neighbor in G[curr_vertex]:
                if roles[neighbor] equal to 0: // do not have a role yet
                    roles[neighbor] = -roles[curr_vertex] // make its role the other role of curr_vertex
                    q.enqueue(neighbor) // add to queue

                if roles[neighbor] equal to roles[curr_vertex]: //cannot be same so return impossible
                    return "impossible"
        
        // Make appointments according to the populations
        if pop1 larger than pop2:
            security extend to group 1
            hosting extend to group 2
        else
            security extend to group 2
            hosting extend to group 1
        
        return [security, hosting]