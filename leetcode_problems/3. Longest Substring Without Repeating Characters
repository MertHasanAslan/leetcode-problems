class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        if(s.size() == 0) return 0; //if size 0 return 0

        vector<int> dict(256, -1); //ASCII table that contains -1 for all of it's values!

        int max_lenght = INT_MIN; 
        int start = -1; //strings starts from 0 therefore size 2 = i - start (1 - (-1))

        for(int i = 0; i < s.size(); i++){
            //if encounter with same char
            if(dict[s[i]] > start){
                start = dict[s[i]]; //update start according to map
            }
            dict[s[i]] = i; //update index of char

            max_lenght = max(max_lenght, i - start); //update max
        }
        return max_lenght;
    }
};